1.Spring框架和Struts2整合应用
  1)将Action、DAO等组件交给Spring容器
  2)引入Struts2和Spring整合的开发包 struts-spring-plugin.jar
   (当struts请求过来时,Action对象将交给整合包去Spring容器获取)
  3)修改struts.xml中的<action>配置，将class属性与Spring容器中<bean>元素的id属性保持一致
   (整合包利用class值当做id标识去Spring容器获取Bean对象)
  4)在web.xml中添加ContextLoaderListener组件配置
   (可以在启动服务器时，实例化Spring容器对象)

2.采用SSH结构重构资费管理模块
原功能采用Struts2+Hibernate结构
利用OpenSessionInViewInterceptor控制事务和Session关闭
--采用SSH结构需要追加以下步骤---
 1)引入Spring开发包和配置文件
===重构Spring+Hibernate=====
 2)编写DAO组件，采用Spring+Hibernate方式实现
 3)在Spring容器配置中定义DAO组件
  --将DAO扫描到Spring容器
  --将SessionFactory给DAO注入
  --引入dbcp开发包，定义DataSource
 4)测试DAO组件
====重构Spring+Struts2===
 *5)将Action定义到Spring容器，如果使用了DAO，采用注入方式使用
 6)引入struts-spring-plugin.jar
 *7)修改Action的struts配置
  (将class属性修改为容器中Action组件的id值)
 8)在web.xml中添加ContextLoaderListener配置，实例化Spring容器
 9)测试SSH

 10)为了支持Hibernate延迟加载的使用，在web.xml中可以配置Spring提供的OpenSessionInViewFilter。将Session关闭推迟到jsp解析之后。
(该Filter需要在Struts控制器Filter之前配置才能生效)
  --注意1：Spring容器中SessionFactory组件的id值必须为sessionFactory
  --注意2：默认将session操作置成realOnly状态，需要添加AOP事务才能执行增删改

3.Spring事务管理
  Spring提供以下两种方式管理事务
 *1)声明式事务管理(基于配置方式实现事务控制)
   a.注解事务配置
  --定义HibernateTransactionManager事务管理Bean组件
  --开启事务的注解配置
    <tx:annotation-driven>
  --然后在业务组件和方法中使用@Transactional注解即可
  （注意：如果将Action当做目标，需要在<tx:annotation-driven>添加
proxy-target-class="true"属性,表示采用CGLIB方式生成代理类）

  @Transaction可以定义在类前和方法前。
//定义在类前，表示为该类所有业务方法指定默认事务管理
//定义在方法前，表示为该方法指定事务管理

 2)编程式事务管理(基于Java编程实现事务控制)
  主要是利用transactionTemplate的execute()方法以回调方式将多个操作封装在一个事务中





